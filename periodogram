op=par(mfrow=c(2,2))
suppressPackageStartupMessages(library(GeneCycle, quietly=TRUE))

DUOMENYS:
##### Nueikite zemiau pateiktu adresu:
##### http://appsso.eurostat.ec.europa.eu/nui/show.do?query=BOOKMARK_DS-055502_QID_-3DE893BC_UID_-3F171EB0&layout=TIME,C,X,0;GEO,L,Y,0;S_ADJ,L,Z,0;UNIT,L,Z,1;INDIC_NA,L,Z,2;INDICATORS,C,Z,3;&zSelection=DS-055502INDIC_NA,P313;DS-055502INDICATORS,OBS_FLAG;DS-055502UNIT,MIO_EUR_KP_PRE;DS-055502S_ADJ,NSA;&rankName1=UNIT_1_2_-1_2&rankName2=INDICATORS_1_2_-1_2&rankName3=INDIC-NA_1_2_-1_2&rankName4=S-ADJ_1_2_-1_2&rankName5=TIME_1_0_0_0&rankName6=GEO_1_2_0_1&sortC=ASC_-1_FIRST&rStp=&cStp=&rDCh=&cDCh=&rDM=true&cDM=true&footnes=false&empty=false&wai=false&time_mode=NONE&time_most_recent=false&lang=EN&cfo=%23%23%23%2C%23%23%23.%23%23%23
##### Pasirinkite Download --> CSV --> Flags and footnotes <nuimkite varnele!> --> Pasirinkite Cell formatting 1 234.56.
##### Paspauskite Download in CSV format
##### Parsisiuntus isskleisti .zip faila

all2=read.csv(file.choose(), sep=',') ## pasirinkite .csv faila su duomenimis
all2$Value=gsub(' ', '', all2$Value)
all2$Value=as.numeric(paste(all2$Value))
skirt=diff(which(is.na(all2$Value)))
prad=which(diff(which(is.na(all2$Value)))!=1)

cz2=all2$Value[(skirt[prad[1]]+prad[2]):(skirt[prad[1]]+prad[2]+skirt[prad[2]]-2)]

fr2=all2$Value[(sum(skirt[prad[1:5]])+prad[6]-4):(sum(skirt[prad[1:5]])+prad[6]+skirt[prad[6]]-6)]

cy2=all2$Value[(sum(skirt[prad[1:7]])+prad[8]-6):(sum(skirt[prad[1:7]])+prad[8]+skirt[prad[8]]-8)]

malta2=all2$Value[(sum(skirt[prad[1:11]])+prad[12]-10):(sum(skirt[prad[1:11]])+prad[12]+skirt[prad[12]]-12)]


plot(periodogram(diff(cz2))$freq,periodogram(diff(cz2), method='smooth')$spec, ylim=c(0, 1100000), type='both', xlab='Dažnis', ylab='Spektras', main='Periodograma: Čekija')
plot(periodogram(diff(fr2))$freq,periodogram(diff(fr2), method='smooth')$spec, type='both', ylim=c(0, 300000000), xlab='Dažnis', ylab='Spektras', main='Periodograma: Prancūzija')
plot(periodogram(diff(cy2))$freq,periodogram(diff(cy2), method='smooth')$spec, ylim=c(0, 31000),type='both',  xlab='Dažnis', ylab='Spektras', main='Periodograma: Kipras')
plot(periodogram(diff(malta2))$freq,periodogram(diff(malta2), method='smooth')$spec, ylim=c(0, 8000),type='both',  xlab='Dažnis', ylab='Spektras', main='Periodograma: Malta')
op=par(mfrow=c(1,1)) 


################################ EGW funkcija ################################################
GARMA.est2=function(x,low.u,low.d,up.u,up.d,inc.u,inc.d,p.max,q=0,nback=100){
  
  # the number of Gegenbauer factors in the proposed model
  k=length(low.u)
  
  # the number of observations in the input realization 
  narma=length(x)
  
  # the sequence of backcasted observations (for now all are 0) 
  # and input realization (centered) 
  nc=narma+nback
  z=rep(0,nc)
  z[-(1:nback)]=x-mean(x)
  
  # fit a high order AR model for realization to backcast
  # use ar.yw since, after specifying AR order, Yule-Walker gives the optimal 
  # AR coefficient estimates in AR model case.
  AR.p=10
  AR.phi=ar.yw(z[-(1:nback)],order.max=AR.p,aic=FALSE,demean=FALSE)$ar
  
  # use this high order AR model to backcast X(0),...X(-nback+1) 
  # that is, correspondingly, z(nback),...z(1) 
  for (i in nback:1) {z[i]=sum(AR.phi*z[(i+1):(i+AR.p)])}
  
  # construct the grids
  u1=seq(low.u[1],up.u[1],inc.u[1])
  d1=seq(low.d[1],up.d[1],inc.d[1])
  garmaAIC=99999
  
  # when there is only one Gegenbauer factor
  # grid search on each u,d combination
  if (k==1)
  {#1#
    for (a1 in 1:length(u1))
    {#2#
      for (b1 in 1:length(d1))
      {#3#
        # transform z sequence to remove Gegenbauer factors
        # and derive a new sequence of w, which can be fit into ARMA model
        C1=GEGENB(u1[a1],-d1[b1],nc)
        w=c()
        for (i in 1:narma) {w[i]=sum(C1[1:(nback+i-1)]*z[(nback+i):2])}
        w=w-mean(w)
        
        # fit sequence of w with an ARMA(p,q) model
        armaAIC=99999
        #for (j in 0:p.max)
        #{#4#
          armafit=auto.arima(w, max.p=p.max, max.q=q, ic='aic') #arima(w,order=c(j,0,q),include.mean=FALSE,method="ML",optim.control=list(maxit=20000))
          if (armafit$aic<armaAIC) {#5#
            armaAIC=armafit$aic
            if (armafit$aic+2*2*(d1[b1]!=0)<garmaAIC){
        garmaAIC=armafit$aic+2*2*(d1[b1]!=0)
                                                      u=u1[a1]
                                                      d=d1[b1]
                                                      p.optim=armafit$arma[1]
                                                      w.optim=w
                                                      model.select=armafit
            }
          }#5#
        #}#4#
      }#3#
    }#2#
  }#1#
  # when there are two Gegenbauer factors
 
  # export the result model estimates
  cat("By comparing AIC in each grid combination, the estimated model is:\n")
  if(sum(abs(d))!=0){
    if(d[1]!=0){
      cat(paste(
        "[1-2(", u[1], ")B+B^2)^(", d[1], ")]", sep=""
      )
      )
    }
    if(k==2 & d[2]!=0){
      cat(paste(
        "[1-2(", u[2], ")B+B^2)^(", d[2], ")]", sep=""
      )
      )
    }
    
    
  }
  if(p.optim!=0){
    cat("[1")
    for (i in 1:p.optim)
    {
      cat(paste(
        "-(", model.select$coef[i], ")B^", i, sep=""
      )
      )
    }
    cat("]")
  }
  cat("Y(t)=")
  if(q!=0){
    cat("[1")
    for (i in (p.max+1):(p.max+q))
    {
      cat(paste(
        "+(", model.select$coef[i], ")B^", i, sep=""
      )
      )
    }
    cat("]")
  }
  cat("a(t)")
  cat("\n")
  cat("The AIC of the GARMA model, which is calculated by -2loglikelihood+2(p+q+m), is ",garmaAIC,",",sep="")
  cat("\n")
  cat("where m=0 for ARMA model, m=2 for GARMA(1) model, m=4 for GARMA(2) model.")
  cat("\n")
  cat("\n")
  list(u=u,d=d,AR.order=p.optim,AR.coef=model.select$coef,sigma2=model.select$sigma2,AR.AIC=model.select$aic,GARMA.AIC=garmaAIC)
}
#########################################################################################

library(waveslim)
library(forecast)

spp.mle(diff(cz2)[9:73], 'mb16')
spp.mle(diff(fr2)[9:137], 'mb16')
spp.mle(diff(cy2)[13:77], 'mb16')
spp.mle(diff(malta2)[25:57], 'mb16')


GARMA.est2(diff(cz2),-0.01,0.3,0.01,0.5,0.01,0.01,0,q=1,nback=500)
GARMA.est2(diff(fr2),-0.01,0.3,0.01,0.5,0.01,0.01,3,q=2,nback=500)
GARMA.est2(diff(cy2),-0.01,0.3,0.01,0.5,0.01,0.01,2,q=1,nback=500)
GARMA.est2(diff(malta2),-0.01,0.3,0.01,0.5,0.01,0.01,0,q=0,nback=500)
